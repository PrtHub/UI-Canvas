{
  "name": "canvas-button",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui-canvas/canvas-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst canvasButtonVariants = cva(\n  \"relative inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        watercolor:\n          \"bg-gradient-to-r from-blue-400 to-purple-500 text-white hover:saturate-150\",\n        oil: \"bg-gradient-to-br from-amber-500 via-orange-500 to-red-500 text-white hover:saturate-150\",\n        charcoal:\n          \"bg-gradient-to-r from-gray-700 to-gray-900 text-white hover:from-gray-800 hover:to-black\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n      },\n      effect: {\n        none: \"\",\n        splash: \"overflow-hidden\",\n        brush: \"overflow-hidden\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      effect: \"none\",\n    },\n  },\n);\n\nexport interface CanvasButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof canvasButtonVariants> {\n  asChild?: boolean;\n}\n\nconst CanvasButton = React.forwardRef<HTMLButtonElement, CanvasButtonProps>(\n  ({ className, variant, size, effect, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    const [splashPosition, setSplashPosition] = React.useState<{\n      x: number;\n      y: number;\n    } | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (effect === \"splash\") {\n        const button = event.currentTarget;\n        const rect = button.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        setSplashPosition({ x, y });\n        setTimeout(() => setSplashPosition(null), 1000);\n      }\n      props.onClick?.(event);\n    };\n\n    return (\n      <Comp\n        className={cn(\n          canvasButtonVariants({ variant, size, effect, className }),\n        )}\n        ref={ref}\n        onClick={handleClick}\n        {...props}\n      >\n        {props.children}\n\n        {effect === \"splash\" && splashPosition && (\n          <motion.span\n            initial={{ scale: 0, opacity: 0.75 }}\n            animate={{ scale: 4, opacity: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"pointer-events-none absolute rounded-full bg-white/30\"\n            style={{\n              width: 20,\n              height: 20,\n              left: splashPosition.x - 10,\n              top: splashPosition.y - 10,\n            }}\n          />\n        )}\n\n        {effect === \"brush\" && (\n          <motion.span\n            initial={{ scaleX: 0 }}\n            animate={{ scaleX: 1 }}\n            transition={{ duration: 0.3 }}\n            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n            style={{\n              transformOrigin: \"left\",\n            }}\n          />\n        )}\n      </Comp>\n    );\n  },\n);\nCanvasButton.displayName = \"CanvasButton\";\n\nexport { CanvasButton, canvasButtonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}