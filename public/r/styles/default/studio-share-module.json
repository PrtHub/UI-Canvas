{
  "name": "studio-share-module",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "qrcode.react"
  ],
  "files": [
    {
      "path": "ui-canvas/studio-share-module.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Share2,\n  Link,\n  Copy,\n  Check,\n  Twitter,\n  Facebook,\n  Linkedin,\n  Mail,\n  QrCode,\n  X,\n} from \"lucide-react\";\nimport QRCode from \"qrcode.react\";\n\ninterface StudioShareModuleProps {\n  url: string;\n  title?: string;\n  description?: string;\n  className?: string;\n  variant?: \"floating\" | \"minimal\" | \"card\";\n  showQR?: boolean;\n  onShare?: () => void;\n}\n\nconst socialPlatforms = [\n  {\n    name: \"Twitter\",\n    icon: Twitter,\n    color: \"hover:bg-[#1DA1F2]/10 hover:text-[#1DA1F2]\",\n    getUrl: (url: string, title: string) =>\n      `https://twitter.com/intent/tweet?url=${encodeURIComponent(\n        url\n      )}&text=${encodeURIComponent(title)}`,\n  },\n  {\n    name: \"Facebook\",\n    icon: Facebook,\n    color: \"hover:bg-[#4267B2]/10 hover:text-[#4267B2]\",\n    getUrl: (url: string) =>\n      `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`,\n  },\n  {\n    name: \"LinkedIn\",\n    icon: Linkedin,\n    color: \"hover:bg-[#0077B5]/10 hover:text-[#0077B5]\",\n    getUrl: (url: string, title: string) =>\n      `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(\n        url\n      )}&title=${encodeURIComponent(title)}`,\n  },\n  {\n    name: \"Email\",\n    icon: Mail,\n    color: \"hover:bg-gray-500/10 hover:text-gray-500\",\n    getUrl: (url: string, title: string) =>\n      `mailto:?subject=${encodeURIComponent(\n        title\n      )}&body=${encodeURIComponent(url)}`,\n  },\n];\n\nconst variants = {\n  floating: {\n    container:\n      \"fixed bottom-4 right-4 rounded-2xl bg-background/80 backdrop-blur-lg shadow-lg border p-4 dark:bg-background/90\",\n    button:\n      \"rounded-full p-3 transition-all hover:scale-105 active:scale-95 bg-primary/5 dark:bg-primary/10\",\n    grid: \"grid-cols-2 sm:grid-cols-4\",\n  },\n  minimal: {\n    container:\n      \"rounded-lg border bg-background p-4 dark:bg-background/80 backdrop-blur-sm\",\n    button:\n      \"rounded-lg p-2 transition-all hover:scale-105 active:scale-95 hover:bg-muted/80\",\n    grid: \"grid-cols-4\",\n  },\n  card: {\n    container:\n      \"rounded-xl border bg-card p-6 shadow-md dark:bg-card/90 backdrop-blur-sm\",\n    button:\n      \"rounded-xl p-3 transition-all hover:scale-105 active:scale-95 bg-muted/50 hover:bg-muted\",\n    grid: \"grid-cols-2 sm:grid-cols-4 gap-4\",\n  },\n};\n\nconst ShareButton = ({\n  icon: Icon,\n  onClick,\n  label,\n  colorClass = \"\",\n}: {\n  icon: any;\n  onClick: () => void;\n  label: string;\n  colorClass?: string;\n}) => (\n  <motion.button\n    whileHover={{ scale: 1.05 }}\n    whileTap={{ scale: 0.95 }}\n    onClick={onClick}\n    className={cn(\n      \"flex flex-col items-center gap-1 rounded-lg p-3 transition-all\",\n      colorClass\n    )}\n  >\n    <Icon className=\"h-5 w-5\" />\n    <span className=\"text-xs text-muted-foreground\">{label}</span>\n  </motion.button>\n);\n\nexport default function StudioShareModule({\n  url,\n  title = \"Check this out!\",\n  description = \"I thought you might find this interesting.\",\n  className,\n  variant = \"card\",\n  showQR = false,\n  onShare,\n}: StudioShareModuleProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [showQRCode, setShowQRCode] = useState(false);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(url);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error(\"Failed to copy URL:\", err);\n    }\n  };\n\n  const handleShare = (platform: typeof socialPlatforms[0]) => {\n    window.open(platform.getUrl(url, title), \"_blank\");\n    onShare?.();\n  };\n\n  if (!isOpen && variant === \"floating\") {\n    return (\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={() => setIsOpen(true)}\n        className=\"fixed bottom-4 right-4 rounded-full bg-primary p-3 text-primary-foreground shadow-lg\"\n      >\n        <Share2 className=\"h-5 w-5\" />\n      </motion.button>\n    );\n  }\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 20 }}\n        className={cn(variants[variant].container, className)}\n      >\n        {variant === \"floating\" && (\n          <button\n            onClick={() => setIsOpen(false)}\n            className=\"absolute right-2 top-2 rounded-full p-1 hover:bg-muted/80\"\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        )}\n\n        <div className=\"mb-4 space-y-1\">\n          <h3 className=\"text-lg font-semibold\">Share {title}</h3>\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n        </div>\n\n        <div className={cn(\"grid gap-2\", variants[variant].grid)}>\n          {socialPlatforms.map((platform) => (\n            <ShareButton\n              key={platform.name}\n              icon={platform.icon}\n              onClick={() => handleShare(platform)}\n              label={platform.name}\n              colorClass={platform.color}\n            />\n          ))}\n        </div>\n\n        <div className=\"mt-4 flex items-center gap-2\">\n          <div className=\"relative flex-1 overflow-hidden rounded-lg border bg-muted/50\">\n            <input\n              type=\"text\"\n              value={url}\n              readOnly\n              className=\"w-full bg-transparent px-3 py-2 text-sm\"\n            />\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={handleCopy}\n              className=\"absolute right-1 top-1/2 -translate-y-1/2 rounded-md bg-background p-1 hover:bg-muted\"\n            >\n              {copied ? (\n                <Check className=\"h-4 w-4 text-green-500\" />\n              ) : (\n                <Copy className=\"h-4 w-4\" />\n              )}\n            </motion.button>\n          </div>\n\n          {showQR && (\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setShowQRCode(!showQRCode)}\n              className={cn(variants[variant].button)}\n            >\n              <QrCode className=\"h-5 w-5\" />\n            </motion.button>\n          )}\n        </div>\n\n        <AnimatePresence>\n          {showQRCode && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: \"auto\" }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"mt-4 flex justify-center overflow-hidden\"\n            >\n              <div className=\"rounded-lg bg-white p-4\">\n                <QRCode value={url} size={128} />\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}