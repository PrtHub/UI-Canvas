{
  "name": "brush-style-selector",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/brush-style-selector.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Paintbrush,\n  Circle,\n  Square,\n  Star,\n  Minus,\n  Plus,\n  Droplet,\n} from \"lucide-react\";\n\nexport type BrushStyle = \"round\" | \"square\" | \"star\" | \"custom\";\nexport type BrushPreset = {\n  id: string;\n  name: string;\n  size: number;\n  opacity: number;\n  style: BrushStyle;\n  color?: string;\n};\n\nexport interface BrushStyleSelectorProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  value: BrushPreset;\n  presets?: BrushPreset[];\n  onValueChange?: (value: BrushPreset) => void;\n  minSize?: number;\n  maxSize?: number;\n}\n\nexport default function BrushStyleSelector({\n  value,\n  presets = [\n    {\n      id: \"1\",\n      name: \"Small Round\",\n      size: 5,\n      opacity: 1,\n      style: \"round\",\n    },\n    {\n      id: \"2\",\n      name: \"Medium Square\",\n      size: 15,\n      opacity: 0.8,\n      style: \"square\",\n    },\n    {\n      id: \"3\",\n      name: \"Large Star\",\n      size: 25,\n      opacity: 0.6,\n      style: \"star\",\n    },\n  ],\n  onValueChange,\n  minSize = 1,\n  maxSize = 100,\n  className,\n  ...props\n}: BrushStyleSelectorProps) {\n  const getBrushIcon = (style: BrushStyle) => {\n    switch (style) {\n      case \"round\":\n        return Circle;\n      case \"square\":\n        return Square;\n      case \"star\":\n        return Star;\n      default:\n        return Paintbrush;\n    }\n  };\n\n  const handleSizeChange = (newSize: number) => {\n    if (onValueChange && newSize >= minSize && newSize <= maxSize) {\n      onValueChange({ ...value, size: newSize });\n    }\n  };\n\n  const handleOpacityChange = (newOpacity: number) => {\n    if (onValueChange && newOpacity >= 0 && newOpacity <= 1) {\n      onValueChange({ ...value, opacity: newOpacity });\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col gap-4 rounded-xl border bg-background/95 p-4 shadow-lg backdrop-blur supports-[backdrop-filter]:bg-background/80\",\n        \"dark:bg-black/90 dark:supports-[backdrop-filter]:bg-black/80\",\n        className,\n      )}\n      {...props}\n    >\n      {/* Current Brush Preview */}\n      <div className=\"flex items-center gap-3 border-b pb-3 dark:border-white/10\">\n        <div\n          className=\"flex h-12 w-12 items-center justify-center rounded-lg border bg-muted/50 dark:border-white/10 dark:bg-white/5\"\n          style={{ opacity: value.opacity }}\n        >\n          {React.createElement(getBrushIcon(value.style), {\n            size: Math.min(40, value.size + 15),\n            className: cn(\n              \"text-foreground dark:text-white\",\n              value.color && \"fill-current\",\n            ),\n            style: value.color ? { color: value.color } : undefined,\n          })}\n        </div>\n        <div className=\"flex flex-col\">\n          <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n            {value.name}\n          </span>\n          <span className=\"text-xs text-muted-foreground dark:text-white/50\">\n            {value.size}px â€¢ {Math.round(value.opacity * 100)}% opacity\n          </span>\n        </div>\n      </div>\n\n      {/* Size Control */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xs font-medium text-foreground/90 dark:text-white/90\">\n            Size\n          </span>\n          <span className=\"text-xs text-muted-foreground dark:text-white/50\">\n            {value.size}px\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => handleSizeChange(value.size - 1)}\n            className=\"rounded-md p-1.5 text-muted-foreground hover:text-foreground dark:text-white/50 dark:hover:text-white\"\n            disabled={value.size <= minSize}\n          >\n            <Minus className=\"h-4 w-4\" />\n          </button>\n          <input\n            type=\"range\"\n            min={minSize}\n            max={maxSize}\n            value={value.size}\n            onChange={(e) => handleSizeChange(Number(e.target.value))}\n            className=\"h-2 flex-1 cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\"\n          />\n          <button\n            onClick={() => handleSizeChange(value.size + 1)}\n            className=\"rounded-md p-1.5 text-muted-foreground hover:text-foreground dark:text-white/50 dark:hover:text-white\"\n            disabled={value.size >= maxSize}\n          >\n            <Plus className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Opacity Control */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xs font-medium text-foreground/90 dark:text-white/90\">\n            Opacity\n          </span>\n          <span className=\"text-xs text-muted-foreground dark:text-white/50\">\n            {Math.round(value.opacity * 100)}%\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Droplet className=\"h-4 w-4 text-muted-foreground dark:text-white/50\" />\n          <input\n            type=\"range\"\n            min={0}\n            max={100}\n            value={value.opacity * 100}\n            onChange={(e) => handleOpacityChange(Number(e.target.value) / 100)}\n            className=\"h-2 flex-1 cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\"\n          />\n        </div>\n      </div>\n\n      {/* Brush Presets */}\n      <div className=\"space-y-2\">\n        <span className=\"text-xs font-medium text-foreground/90 dark:text-white/90\">\n          Presets\n        </span>\n        <div className=\"grid grid-cols-3 gap-2\">\n          {presets.map((preset) => (\n            <button\n              key={preset.id}\n              onClick={() => onValueChange?.(preset)}\n              className={cn(\n                \"flex flex-col items-center gap-1 rounded-lg border p-2 transition-colors\",\n                \"hover:bg-accent/5 dark:hover:bg-white/5\",\n                value.id === preset.id &&\n                  \"border-accent bg-accent/10 dark:border-white/20 dark:bg-white/10\",\n              )}\n            >\n              <div\n                className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-muted/50 dark:border-white/10 dark:bg-white/5\"\n                style={{ opacity: preset.opacity }}\n              >\n                {React.createElement(getBrushIcon(preset.style), {\n                  size: Math.min(24, preset.size + 10),\n                  className: cn(\n                    \"text-foreground dark:text-white\",\n                    preset.color && \"fill-current\",\n                  ),\n                  style: preset.color ? { color: preset.color } : undefined,\n                })}\n              </div>\n              <span className=\"text-xs text-muted-foreground dark:text-white/50\">\n                {preset.name}\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}